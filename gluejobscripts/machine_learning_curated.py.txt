import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue import DynamicFrame

def sparkSqlQuery(glueContext, query, mapping, transformation_ctx) -> DynamicFrame:
    for alias, frame in mapping.items():
        frame.toDF().createOrReplaceTempView(alias)
    result = spark.sql(query)
    return DynamicFrame.fromDF(result, glueContext, transformation_ctx)
args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Script generated for node Step Trainer Trusted
StepTrainerTrusted_node1712455636709 = glueContext.create_dynamic_frame.from_catalog(database="stedi", table_name="step_trainer_trusted", transformation_ctx="StepTrainerTrusted_node1712455636709")

# Script generated for node acceleromter trusted
acceleromtertrusted_node1712455638842 = glueContext.create_dynamic_frame.from_catalog(database="stedi", table_name="accelerometer_trusted", transformation_ctx="acceleromtertrusted_node1712455638842")

# Script generated for node SQL Query
SqlQuery0 = '''
select distinct at.user,stt.*,at.x,at.y,at.z  from at,stt
where at.timestamp=stt.sensorreadingtime
'''
SQLQuery_node1712455728914 = sparkSqlQuery(glueContext, query = SqlQuery0, mapping = {"at":acceleromtertrusted_node1712455638842, "stt":StepTrainerTrusted_node1712455636709}, transformation_ctx = "SQLQuery_node1712455728914")

# Script generated for node Amazon S3
AmazonS3_node1712457059991 = glueContext.getSink(path="s3://vjdeudanano/machine_learning_curated/", connection_type="s3", updateBehavior="UPDATE_IN_DATABASE", partitionKeys=[], enableUpdateCatalog=True, transformation_ctx="AmazonS3_node1712457059991")
AmazonS3_node1712457059991.setCatalogInfo(catalogDatabase="stedi",catalogTableName="machine_learning_curated")
AmazonS3_node1712457059991.setFormat("json")
AmazonS3_node1712457059991.writeFrame(SQLQuery_node1712455728914)
job.commit()